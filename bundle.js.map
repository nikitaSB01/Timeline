{"version":3,"file":"bundle.js","mappings":"sCAAA,MAAMA,EAAsBC,EAAQ,KAG9BC,EAAYC,SAASC,eAAe,aACpCC,EAAkBF,SAASC,eAAe,mBAC1CE,EAAWH,SAASC,eAAe,YACnCG,EAAeJ,SAASC,eAAe,gBACvCI,EAAmBL,SAASC,eAAe,oBAwBjD,SAASK,EAAuBC,EAAMC,EAAUC,GAC9C,MAAMC,EAAOV,SAASW,cAAc,OACpCD,EAAKE,UAAUC,IAAI,QAGnB,MACMC,GADM,IAAIC,MACUC,eAAe,QAAS,CAChDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,YAGVX,EAAKY,UAAY,wEAEgBR,yDAEHP,wCACAC,MAAaC,eAG3CT,SAASuB,cAAc,qBAAqBC,QAAQd,EACtD,CAGAX,EAAU0B,iBAAiB,YAAaC,IACpB,UAAdA,EAAMC,KAA8C,KAA3B5B,EAAU6B,MAAMC,QAhD/C,WACE,MAAMC,EAAW/B,EAAU6B,MAAMC,OAC7BE,UAAUC,YACZD,UAAUC,YAAYC,oBACnBC,IACC,MAAM,SAAE1B,EAAQ,UAAEC,GAAcyB,EAASC,OACzC7B,EAAuBwB,EAAUtB,EAAUC,GAC3CV,EAAU6B,MAAQ,EAAE,IAEtB,KAEE1B,EAAgBkC,MAAMC,QAAU,MAAM,IAI1CC,MAAM,gDAEV,CAgCIC,EACF,IAIFpC,EAASsB,iBAAiB,SAAS,KACjC,MAAMU,EAAS9B,EAAiBuB,MAAMC,OACtC,IACE,MAAM,SAAErB,EAAQ,UAAEC,GAAcZ,EAAoBsC,GACpD7B,EAAuBP,EAAU6B,MAAOpB,EAAUC,GAClDP,EAAgBkC,MAAMC,QAAU,OAChCtC,EAAU6B,MAAQ,EACpB,CAAE,MAAOY,GACPF,MAAME,EAAMC,QACd,KAIFrC,EAAaqB,iBAAiB,SAAS,KACrCvB,EAAgBkC,MAAMC,QAAU,MAAM,G,kBC9DxCK,EAAOC,QAfP,SAA6BC,GAE3B,MAAMC,EAAiBD,EAAME,QAAQ,YAAa,KAE3CtC,EAAUC,GAAaoC,EAAeE,MAAM,KAEnD,IAAKvC,GAAYwC,MAAMxC,KAAcC,GAAauC,MAAMvC,GACtD,MAAM,IAAIwC,MAAM,iCAElB,MAAO,CACLzC,SAAU0C,WAAW1C,GACrBC,UAAWyC,WAAWzC,GAE1B,C,GCbI0C,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaX,QAGrB,IAAID,EAASS,EAAyBE,GAAY,CAGjDV,QAAS,CAAC,GAOX,OAHAa,EAAoBH,GAAUX,EAAQA,EAAOC,QAASS,GAG/CV,EAAOC,OACf,CCrBAS,EAAoBK,EAAI,SAASf,GAChC,IAAIgB,EAAShB,GAAUA,EAAOiB,WAC7B,WAAa,OAAOjB,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAU,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,ECNAN,EAAoBQ,EAAI,SAASjB,EAASmB,GACzC,IAAI,IAAInC,KAAOmC,EACXV,EAAoBW,EAAED,EAAYnC,KAASyB,EAAoBW,EAAEpB,EAAShB,IAC5EqC,OAAOC,eAAetB,EAAShB,EAAK,CAAEuC,YAAY,EAAMC,IAAKL,EAAWnC,IAG3E,ECPAyB,EAAoBW,EAAI,SAASK,EAAKC,GAAQ,OAAOL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,E","sources":["webpack://timeline/./src/js/index.js","webpack://timeline/./src/js/validateCoordinates.js","webpack://timeline/webpack/bootstrap","webpack://timeline/webpack/runtime/compat get default export","webpack://timeline/webpack/runtime/define property getters","webpack://timeline/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["const validateCoordinates = require(\"./validateCoordinates\");\n\n// Получение ссылки на элементы\nconst postInput = document.getElementById(\"postInput\");\nconst coordinateModal = document.getElementById(\"coordinateModal\");\nconst okButton = document.getElementById(\"okButton\");\nconst cancelButton = document.getElementById(\"cancelButton\");\nconst coordinatesInput = document.getElementById(\"coordinatesInput\");\n\n// Функция для запроса координат\nfunction requestCoordinates() {\n  const postText = postInput.value.trim(); // Сохраняем текст перед очисткой поля\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        addPostWithCoordinates(postText, latitude, longitude);\n        postInput.value = \"\"; // Очистка поля ввода после добавления поста\n      },\n      () => {\n        // Показать модальное окно при ошибке\n        coordinateModal.style.display = \"flex\";\n      }\n    );\n  } else {\n    alert(\"Geolocation не поддерживается вашим браузером\");\n  }\n}\n\n// Функция для добавления поста\n// Функция для добавления поста\nfunction addPostWithCoordinates(text, latitude, longitude) {\n  const post = document.createElement(\"div\");\n  post.classList.add(\"post\");\n\n  // Получение текущей даты и времени\n  const now = new Date();\n  const formattedDate = now.toLocaleString(\"ru-RU\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  post.innerHTML = `\n      <div class=\"post__header\">\n        <span class=\"post__date\">${formattedDate}</span>\n      </div>\n      <p class=\"p post__text\">${text}</p>\n      <p class=\"p post__geo\">[${latitude}, ${longitude}]</p>\n    `;\n\n  document.querySelector(\".container__posts\").prepend(post);\n}\n\n// Обработка нажатия Enter в поле ввода\npostInput.addEventListener(\"keypress\", (event) => {\n  if (event.key === \"Enter\" && postInput.value.trim() !== \"\") {\n    requestCoordinates();\n  }\n});\n\n// Обработка кнопки ОК в модальном окне\nokButton.addEventListener(\"click\", () => {\n  const coords = coordinatesInput.value.trim();\n  try {\n    const { latitude, longitude } = validateCoordinates(coords);\n    addPostWithCoordinates(postInput.value, latitude, longitude);\n    coordinateModal.style.display = \"none\";\n    postInput.value = \"\"; // Очистка поля ввода после добавления поста\n  } catch (error) {\n    alert(error.message);\n  }\n});\n\n// Обработка кнопки Отмена в модальном окне\ncancelButton.addEventListener(\"click\", () => {\n  coordinateModal.style.display = \"none\";\n});\n\n//? ......... ДОБОВЛЯЕМ ЛОГИКУ АУДИО/ВИДЕО .......\n","// Функция для валидации координат\nfunction validateCoordinates(input) {\n  // Удаляем квадратные скобки и пробелы, если они есть\n  const sanitizedInput = input.replace(/[\\[\\]\\s]/g, \"\");\n  // Разделяем координаты по запятой\n  const [latitude, longitude] = sanitizedInput.split(\",\");\n  // Проверка, что обе части являются числами\n  if (!latitude || isNaN(latitude) || !longitude || isNaN(longitude)) {\n    throw new Error(\"Некорректный формат координат\");\n  }\n  return {\n    latitude: parseFloat(latitude),\n    longitude: parseFloat(longitude),\n  };\n}\n\nmodule.exports = validateCoordinates;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["validateCoordinates","require","postInput","document","getElementById","coordinateModal","okButton","cancelButton","coordinatesInput","addPostWithCoordinates","text","latitude","longitude","post","createElement","classList","add","formattedDate","Date","toLocaleString","day","month","year","hour","minute","innerHTML","querySelector","prepend","addEventListener","event","key","value","trim","postText","navigator","geolocation","getCurrentPosition","position","coords","style","display","alert","requestCoordinates","error","message","module","exports","input","sanitizedInput","replace","split","isNaN","Error","parseFloat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}